name: CUDA-enabled tests
on: [create, workflow_dispatch]
  
jobs:
  cuda:
    runs-on: ubuntu-latest      
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: {python-version: '3.12'}
      - run: pip install lightning-sdk
      - name: Run tests inside Lightning Job (CUDA T4)
        shell: bash
        env:
          LIGHTNING_API_KEY: ${{ secrets.LIGHTNING_API_KEY }}
          LIGHTNING_USER_ID: ${{ secrets.LIGHTNING_USER_ID }}
          LIGHTNING_USERNAME: ${{ secrets.LIGHTNING_USERNAME }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
          GITHUB_RUN_ID: ${{ github.run_id }}
        run: |
          python - <<'PY'
          import os, shlex, sys
          from lightning_sdk import Studio, Machine
      
          repo   = os.environ["GITHUB_REPOSITORY"]
          branch = os.environ["GITHUB_REF_NAME"]
          image  = os.environ["IMAGE"]
      
          s = Studio(name=f"ci-studio-{os.environ['GITHUB_RUN_ID']}",
                     user=os.environ["LIGHTNING_USERNAME"], create_ok=True)
          s.start(Machine.T4)
          s.install_plugin("jobs")
          jobs = s.installed_plugins["jobs"]
      
          # the job will produce artifacts in /artifacts inside its FS
          test_cmd = (
              'bash -lc "'
              f'git clone --depth 1 --branch {shlex.quote(branch)} https://github.com/{shlex.quote(repo)} repo && '
              'cd repo && '
              'python -m pip install -e . && '
              'pytest -vv -ra --junitxml=/artifacts/pytest-results.xml | tee /artifacts/pytest-output.log"'
          )
      
          kw = dict(command=test_cmd, name=f"ci-job-{os.environ['GITHUB_RUN_ID']}", machine=Machine.T4)

          job = jobs.run(container=image, **kw)      
          job.wait() 
      
          # download artifacts from the job into the runner workspace
          job.download_file("/artifacts/pytest-results.xml", "pytest-results.xml")
          job.download_file("/artifacts/pytest-output.log",  "pytest-output.log")
      
          s.stop(); s.delete()
          sys.exit(job.exit_code or 0)     
          PY


      - name: Upload pytest artefacts
        if: always()      
        uses: actions/upload-artifact@v4
        with:
          name: pytest-artifacts
          path: |
            pytest-output.log
            pytest-results.xml
