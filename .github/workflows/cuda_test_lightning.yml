name: CUDA-enabled tests
on: [create, workflow_dispatch]

jobs:
  cuda:
    permissions: 
      contents: read
      packages: read
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with: { python-version: '3.12' }

      - run: python -m pip install lightning-sdk

      - name: Run tests in Lightning (T4, GHCR :latest)
        shell: bash
        env:
          LIGHTNING_API_KEY: ${{ secrets.LIGHTNING_API_KEY }}
          LIGHTNING_USER_ID: ${{ secrets.LIGHTNING_USER_ID }}
          LIGHTNING_USERNAME: ${{ secrets.LIGHTNING_USERNAME }}
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python - <<'PY'
          import os, sys
          from lightning_sdk import Studio, Machine, Job

          owner  = os.environ["GITHUB_REPOSITORY_OWNER"]
          repo   = os.environ["GITHUB_REPOSITORY"]
          branch = os.environ.get("GITHUB_REF_NAME", "main")
          run_id = os.environ.get("GITHUB_RUN_ID", "manual")
          git_token = os.environ["TOKEN"]
          image  = f"ghcr.io/{owner}/ci-test-env:latest"

          # studio = Studio(name=f"ci-studio-{run_id}",
          #                 teamspace="Vision-model",
          #                 user=os.environ["LIGHTNING_USERNAME"],
          #                 create_ok=True)
          # studio.start(Machine.T4)

          cmd = (
              'bash -lc "'
              f'git clone --depth 1 --branch {branch} https://github.com/{repo} repo && '
              'cd repo && '
              'python -m pip install -e . && '
              'mkdir -p /artifacts && '
              'pytest -vv -ra --junitxml=/artifacts/pytest-results.xml | tee /artifacts/pytest-output.log"'
          )
          smoke = (
              'bash -lc "python -V; nvidia-smi || true; '
              'mkdir -p /artifacts; echo SMOKE >/artifacts/pytest-output.log; '
              'echo \\"<testsuite/>\\" >/artifacts/pytest-results.xml"'
          )

          job = Job.run(command=smoke, 
                        user=os.environ["LIGHTNING_USERNAME"],
                        name=f"ci-job-{run_id}", 
                        machine=Machine.T4,
                        teamspace="Vision-model",
                        image=image)
          job.wait()
          job.download_file("/artifacts/pytest-results.xml", "pytest-results.xml")
          job.download_file("/artifacts/pytest-output.log",  "pytest-output.log")

          studio.stop(); studio.delete()
          sys.exit(job.exit_code or 0)
          PY

      - name: Upload pytest artefacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-artifacts
          path: |
            pytest-output.log
            pytest-results.xml
