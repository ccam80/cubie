name: CUDA-enabled tests
on:
  create:
  workflow_dispatch:
  schedule:
    - cron: "0 3 * * *"
  # We're limited to 15 "credits" per month using the Lightning AI runner. One run on one image costs ~0.12 credits at 31/07/2025, including machine spinup, giving us about 120 runs per month.
  # Running CUDA tests daily at 3am and occasionally on dispatch gives us room to add two more images to test different CUDA toolkit versions.

jobs:
  cuda:
    permissions: 
      contents: read
      packages: read
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with: { python-version: '3.12' }

      - run: python -m pip install lightning-sdk

      - name: Run tests in Lightning (T4, GHCR :latest)
        shell: bash
        env:
          LIGHTNING_API_KEY: ${{ secrets.LIGHTNING_API_KEY }}
          LIGHTNING_USER_ID: ${{ secrets.LIGHTNING_USER_ID }}
          LIGHTNING_USERNAME: ${{ secrets.LIGHTNING_USERNAME }}
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          GH_PAT: ${{ secrets.CUDA_PAT }}
        run: |
          python - <<'PY'
          import os, sys
          from lightning_sdk import Studio, Machine, Job, Status

          owner  = os.environ["GITHUB_REPOSITORY_OWNER"]
          repo   = os.environ["GITHUB_REPOSITORY"]
          branch = os.environ.get("GITHUB_REF_NAME", "main")
          run_id = os.environ.get("GITHUB_RUN_ID", "manual")
          gh_pat = os.getenv("GH_PAT")
          git_url = f"https://{gh_pat}@github.com/{repo}.git"
          image  = f"ghcr.io/{owner}/ci-test-env:latest"


          cmd = (
              'bash -lc "'
              f'git clone --depth 1 --branch {branch} {git_url} repo && '
              'cd repo && '
              'python -m pip install -e . && '
              'mkdir -p /artifacts && '
              'pytest -vv -ra --junitxml=/artifacts/pytest-results.xml | tee /artifacts/pytest-output.log"'
          )

          job = Job.run(command=cmd, 
                        user=os.environ["LIGHTNING_USERNAME"],
                        name=f"ci-job-{run_id}", 
                        machine=Machine.T4,
                        teamspace="Vision-model",
                        image=image)
          job.wait()

          path = "lightning-job.log"
          with open(path, "w", encoding="utf-8") as f:
              f.write(job.logs)
            
          if job.status == Status.Completed:
              sys.exit(0) 
          else:
              # for any other phase (failed, cancelled, etc.), exit with a non-zero code
              sys.exit(1)
          PY
          
      - name: Upload pytest artefacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-artifacts
          path: |
            lightning-job.log
