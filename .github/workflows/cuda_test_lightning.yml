name: CUDA-enabled tests
on: [create, workflow_dispatch]

jobs:
  cuda:
    permissions: 
      contents: read
      packages: read
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with: { python-version: '3.12' }

      - run: python -m pip install lightning-sdk

      - name: Run tests in Lightning (T4, GHCR :latest)
        shell: bash
        env:
          LIGHTNING_API_KEY: ${{ secrets.LIGHTNING_API_KEY }}
          LIGHTNING_USER_ID: ${{ secrets.LIGHTNING_USER_ID }}
          LIGHTNING_USERNAME: ${{ secrets.LIGHTNING_USERNAME }}
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          GH_PAT: ${{ secrets.CUDA_PAT }}
        run: |
          python - <<'PY'
          import os, sys
          from lightning_sdk import Studio, Machine, Job, Status

          owner  = os.environ["GITHUB_REPOSITORY_OWNER"]
          repo   = os.environ["GITHUB_REPOSITORY"]
          branch = os.environ.get("GITHUB_REF_NAME", "main")
          run_id = os.environ.get("GITHUB_RUN_ID", "manual")
          gh_pat = os.getenv("GH_PAT")
          git_url = f"https://{gh_pat}@github.com/{repo}.git"
          image  = f"ghcr.io/{owner}/ci-test-env:latest"


          cmd = (
              'bash -lc "'
              f'git clone --depth 1 --branch {branch} {git_url} repo && '
              'cd repo && '
              'python -m pip install -e . && '
              'mkdir -p /artifacts && '
              'pytest -vv -ra --junitxml=/artifacts/pytest-results.xml | tee /artifacts/pytest-output.log"'
          )
          smoke = (
              'bash -lc "python -V; nvidia-smi || true; '
              f'git clone --depth 1 --branch {branch} {git_url} repo && '
              'mkdir -p /artifacts; echo SMOKE >/artifacts/pytest-output.log; '
              'echo \\"<testsuite/>\\" >/artifacts/pytest-results.xml"'
          )

          job = Job.run(command=cmd, 
                        user=os.environ["LIGHTNING_USERNAME"],
                        name=f"ci-job-{run_id}", 
                        machine=Machine.T4,
                        teamspace="Vision-model",
                        image=image)
          job.wait()

          # local_artifacts_path = ""
          # job.download_artifacts(local_path=local_artifacts_path)
          
          if job.status == Status.Success:
              sys.exit(0) 
          else:
              # for any other phase (failed, cancelled, etc.), exit with a non-zero code
              sys.exit(1)
          PY
          
      - name: Download pytest artifacts from Lightning Job
        if: always()
        shell: bash
        env:
          LIGHTNING_API_KEY: ${{ secrets.LIGHTNING_API_KEY }}
          LIGHTNING_USER_ID: ${{ secrets.LIGHTNING_USER_ID }}
          LIGHTNING_USERNAME: ${{ secrets.LIGHTNING_USERNAME }}
          # Ensure GITHUB_RUN_ID is available here as well
          GITHUB_RUN_ID: ${{ github.run_id }}
        run: |
          # Define the job name and teamspace from the previous step
          JOB_NAME="ci-job-${{ env.GITHUB_RUN_ID }}"
          TEAMSPACE="Vision-model"

          echo "Attempting to download artifacts from job: $JOB_NAME in teamspace: $TEAMSPACE"

          lightning download file "/teamspace/jobs/${JOB_NAME}/artifacts/pytest-results.xml" \
            --teamspace "${TEAMSPACE}/${JOB_NAME}" \
            --local_path "pytest-results.xml" || true

          lightning download file "/teamspace/jobs/${JOB_NAME}/artifacts/pytest-output.log" \
            --teamspace "${TEAMSPACE}/${JOB_NAME}" \
            --local_path "pytest-output.log" || truelig

          echo "Download attempts finished."
      - name: Upload pytest artefacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-artifacts
          path: |
            pytest-output.log
            pytest-results.xml
