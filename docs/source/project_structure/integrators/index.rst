Integrators
===========

``cubie.integrators``
---------------------

.. currentmodule:: cubie.integrators

The :class:`SingleIntegratorRun` façade is the primary entry point. It creates a
loop callable by wiring controller, algorithm, and loop submodules according to
the supplied :class:`IntegratorRunSettings`.

The :mod:`cubie.integrators` package coordinates CUDA-based initial value
problem integrations. It bundles algorithm factories, controller builders,
matrix-free solver helpers, and loop orchestrators that combine CUDA device
functions from ODE systems with adaptive or fixed step control.

.. toctree::
   :maxdepth: 1
   :caption: Subpackages

   algorithms
   loops
   matrix_free_solvers
   step_control

Core API
--------

* :class:`SingleIntegratorRun` – high-level integration façade.
* :class:`IntegratorReturnCodes` – enumerates loop exit statuses.

Factories and helpers
---------------------

* :func:`get_algorithm_step` – retrieves CUDA step factories by name.
* :class:`ExplicitStepConfig` – attrs configuration for explicit schemes.
* :class:`ImplicitStepConfig` – attrs configuration for implicit schemes.
* :class:`ExplicitEulerStep` – explicit Euler CUDA step implementation.
* :class:`BackwardsEulerStep` – backward Euler CUDA step implementation.
* :class:`BackwardsEulerPCStep` – predictor-corrector backward Euler variant.
* :class:`CrankNicolsonStep` – Crank–Nicolson implicit step implementation.
* :class:`IVPLoop` – builds compiled CUDA loops for IVP execution.
* :func:`linear_solver_factory` – matrix-free linear solver factory.
* :func:`newton_krylov_solver_factory` – Newton–Krylov solver factory.
* :class:`AdaptiveIController` – integral adaptive step controller.
* :class:`AdaptivePIController` – proportional-integral controller.
* :class:`AdaptivePIDController` – proportional-integral-derivative controller.
* :class:`FixedStepController` – no-op step controller for fixed steps.
* :class:`GustafssonController` – Gustafsson adaptive controller variant.
* :func:`get_controller` – factory that resolves controller instances.

Dependencies
------------

- Implicit algorithms obtain Newton--Krylov helpers from
  :mod:`cubie.integrators.matrix_free_solvers` via ``get_solver_helper_fn``
  closures.
- Loop factories depend on :mod:`cubie.outputhandling` for compile flags and
  saving callbacks generated by
  :class:`cubie.outputhandling.output_functions.OutputFunctions`.
- Controllers operate alongside algorithm step objects exposed by
  :mod:`cubie.integrators.algorithms` to manage adaptive step sizes.
