src/cubie/integrators
=====================

.. currentmodule:: cubie.integrators

The :class:`SingleIntegratorRun` fa√ßade is the primary entry point. It
creates a loop callable by wiring controller, algorithm, and loop
submodules according to the supplied
:class:`cubie.integrators.IntegratorRunSettings.IntegratorRunSettings`.

The :mod:`cubie.integrators` package coordinates CUDA-based initial value
problem (IVP) integrations. It bundles algorithm factories, controller
builders, matrix-free solver helpers, and loop orchestrators that combine
CUDA device functions from ODE systems with adaptive or fixed step control.

Subpackages
-----------

.. autosummary::
   :toctree: generated/
   :recursive:

   cubie.integrators.algorithms
   cubie.integrators.loops
   cubie.integrators.matrix_free_solvers
   cubie.integrators.step_control

Core API
--------

.. autosummary::
   :toctree: generated/

   SingleIntegratorRun
   IntegratorReturnCodes

Factories and helpers
---------------------

.. autosummary::
   :toctree: generated/

   get_algorithm_step
   ExplicitStepConfig
   ImplicitStepConfig
   ExplicitEulerStep
   BackwardsEulerStep
   BackwardsEulerPCStep
   CrankNicolsonStep
   IVPLoop
   linear_solver_factory
   newton_krylov_solver_factory
   AdaptiveIController
   AdaptivePIController
   AdaptivePIDController
   FixedStepController
   GustafssonController
   get_controller

Dependencies
------------

- Implicit algorithms obtain Newton--Krylov helpers from
  :mod:`cubie.integrators.matrix_free_solvers` via ``get_solver_helper_fn``
  closures.
- Loop factories depend on :mod:`cubie.outputhandling` for compile flags and
  saving callbacks generated by :class:`cubie.outputhandling.output_functions.OutputFunctions`.
- Controllers operate in concert with algorithm step objects exposed by
  :mod:`cubie.integrators.algorithms` to manage adaptive step sizes.

